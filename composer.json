{
    "name": "pelago/emogrifier",
    "description": "Converts CSS styles into inline style attributes in your HTML code",
    "license": "MIT",
    "keywords": [
        "email",
        "css",
        "pre-processing"
    ],
    "authors": [
        {
            "name": "Oliver Klee",
            "email": "github@oliverklee.de"
        },
        {
            "name": "Zoli Szab√≥",
            "email": "zoli.szabo+github@gmail.com"
        },
        {
            "name": "John Reeve",
            "email": "jreeve@pelagodesign.com"
        },
        {
            "name": "Jake Hotson",
            "email": "jake@qzdesign.co.uk"
        },
        {
            "name": "Cameron Brooks"
        },
        {
            "name": "Jaime Prado"
        }
    ],
    "homepage": "https://www.myintervals.com/emogrifier.php",
    "support": {
        "issues": "https://github.com/MyIntervals/emogrifier/issues",
        "source": "https://github.com/MyIntervals/emogrifier"
    },
    "require": {
        "php": "~7.3.0 || ~7.4.0 || ~8.0.0 || ~8.1.0 || ~8.2.0",
        "ext-dom": "*",
        "ext-libxml": "*",
        "sabberworm/php-css-parser": "^8.4.0",
        "symfony/css-selector": "^4.4.23 || ^5.4.0 || ^6.0.0"
    },
    "require-dev": {
        "php-parallel-lint/php-parallel-lint": "^1.3.2",
        "phpunit/phpunit": "^9.5.25",
        "rawr/cross-data-providers": "^2.3.0"
    },
    "prefer-stable": true,
    "autoload": {
        "psr-4": {
            "Pelago\\Emogrifier\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Pelago\\Emogrifier\\Tests\\": "tests/"
        }
    },
    "config": {
        "preferred-install": {
            "*": "dist"
        },
        "sort-packages": true
    },
    "extra": {
        "branch-alias": {
            "dev-main": "8.0.x-dev"
        }
    },
    "scripts": {
        "ci": [
            "@ci:static",
            "@ci:dynamic"
        ],
        "ci:composer:normalize": "@php \"./.phive/composer-normalize\" --dry-run",
        "ci:dynamic": [
            "@ci:tests"
        ],
        "ci:php:fixer": "@php \"./.phive/php-cs-fixer\" --config=config/php-cs-fixer.php fix --dry-run -v --show-progress=dots config/ src/ tests/",
        "ci:php:lint": "\"./vendor/bin/parallel-lint\" config src tests",
        "ci:php:md": "@php \"./.phive/phpmd\" src text config/phpmd.xml",
        "ci:php:psalm": "@php \"./.phive/psalm\" --show-info=false",
        "ci:php:sniff": "@php \"./.phive/phpcs\" config src tests",
        "ci:static": [
            "@ci:composer:normalize",
            "@ci:php:lint",
            "@ci:php:sniff",
            "@ci:php:fixer",
            "@ci:php:md",
            "@ci:php:psalm"
        ],
        "ci:tests": [
            "@ci:tests:unit"
        ],
        "ci:tests:sof": "@php \"./vendor/bin/phpunit\" --stop-on-failure --do-not-cache-result",
        "ci:tests:unit": "@php \"./vendor/bin/phpunit\" --do-not-cache-result",
        "composer:normalize": "@php \"./.phive/composer-normalize\" --no-check-lock",
        "php:fix": "@php \"./.phive/php-cs-fixer\" --config=config/php-cs-fixer.php fix config/ src/ tests/",
        "php:version": "@php -v | grep -Po 'PHP\\s++\\K(?:\\d++\\.)*+\\d++(?:-\\w++)?+'",
        "psalm:baseline": "@php \"./.phive/psalm\" --set-baseline=psalm.baseline.xml",
        "psalm:cc": "@php \"./.phive/psalm\" --clear-cache"
    },
    "scripts-descriptions": {
        "ci": "Runs all dynamic and static code checks.",
        "ci:composer:normalize": "Checks the formatting and structure of the composer.json.",
        "ci:dynamic": "Runs all dynamic tests (i.e., currently, the unit tests).",
        "ci:php:fixer": "Checks the code style with PHP CS Fixer.",
        "ci:php:lint": "Lints the PHP files for syntax errors.",
        "ci:php:md": "Checks the code complexity with PHPMD.",
        "ci:php:psalm": "Checks the types with Psalm.",
        "ci:php:sniff": "Checks the code style with PHP_CodeSniffer.",
        "ci:static": "Runs all static code analysis checks for the code and the composer.json.",
        "ci:tests": "Runs all dynamic tests (i.e., currently, the unit tests).",
        "ci:tests:sof": "Runs the unit tests and stops at the first failure.",
        "ci:tests:unit": "Runs all unit tests.",
        "composer:normalize": "Reformats and sorts the composer.json file.",
        "php:fix": "Reformats the code with php-cs-fixer.",
        "php:version": "Outputs the installed PHP version.",
        "psalm:baseline": "Updates the Psalm baseline file to match the code.",
        "psalm:cc": "Clears the Psalm cache."
    }
}
